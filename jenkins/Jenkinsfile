properties([
	buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '1', numToKeepStr: '1')),
])

pipeline {
    agent any
    
	environment {
	 
		now = sh (
			returnStdout: true,
			script: """
			echo \$(date "+%Y%m%d-%H%M")
			"""
		).trim()

	}
    
    stages {
        
       stage('Version') {
            steps {
		    
		// Get the latest git commit message
                def lastCommit = sh(script: "git log --format=%B -n 1 HEAD", returnStdout: true).trim()


                // Increment the version number based on the commit message
                if (lastCommit.contains('major')) {
                    VERSION = sh(script: 'semver -i major ${VERSION} | cut -c2-', returnStdout: true).trim()
                } else if (lastCommit.contains('minor')) {
                    VERSION = sh(script: 'semver -i minor ${VERSION} | cut -c2-', returnStdout: true).trim()
                } else if (lastCommit.contains('patch')) {
                    VERSION = sh(script: 'semver -i patch ${VERSION} | cut -c2-', returnStdout: true).trim()
                }
                
                echo "next version is blah blah blah"
		    
            }
	    
        }
        
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Delivers') {
            steps {
                sh './jenkins/scripts/deliver.sh' //test
            }
        }
    }
}
