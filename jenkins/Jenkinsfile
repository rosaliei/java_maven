pipeline {
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '1', numToKeepStr: '1'))
    }

    environment {
        // Set the initial version number
        VERSION = '1.0.0'
    }

    stages {
        stage('Version') {
            steps {
                // Get the latest git commit message
                def lastCommit = sh(
                    returnStdout: true,
                    script: 'git log -1 --pretty=%B'
                ).trim()

                // Increment the version number based on the commit message
                if (lastCommit.contains('major')) {
                    VERSION = sh(script: 'semver -i major ${VERSION} | cut -c2-', returnStdout: true).trim()
                } else if (lastCommit.contains('minor')) {
                    VERSION = sh(script: 'semver -i minor ${VERSION} | cut -c2-', returnStdout: true).trim()
                } else if (lastCommit.contains('patch')) {
                    VERSION = sh(script: 'semver -i patch ${VERSION} | cut -c2-', returnStdout: true).trim()
                }

                // Print the new version number
                echo "New version is ${VERSION}"
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }

            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
    }
}
